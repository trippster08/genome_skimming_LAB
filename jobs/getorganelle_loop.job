#!/bin/sh
# ----------------Parameters---------------------- #
#$ -S /bin/sh
#$ -pe mthread 8
#$ -q mThM.q
#$ -l mres=96G,h_data=12G,h_vmem=12G,himem
#$ -cwd
#$ -j y
#$ -N SAMPLE-NAME_getorganelle
#$ -o logs/SAMPLE-NAME_getorganelle.log
#
# ----------------Modules------------------------- #
module load tools/conda
start-conda
conda activate /scratch/nmnh_lab/envs/genome_skimming/getorganelle_ksm
# ----------------Your Commands------------------- #
#
echo + `date` job $JOB_NAME started in $QUEUE with jobID=$JOB_ID on $HOSTNAME
echo + NSLOTS = $NSLOTS
#
trimmed="$1"
organelle="$2"
name="$3"
data="$4"
#
get_organelle_from_reads.py \
-1 ${trimmed}/${name}_R1_PE_trimmed.fastq.gz \
-2 ${trimmed}/${name}_R2_PE_trimmed.fastq.gz \
-u ${trimmed}/${name}_R0_SE_trimmed.fastq.gz \
-o ${data}/results/getorganelle/${name} \
-F ${organelle} \
-t $NSLOTS
#
echo = `date` job $JOB_NAME done


# -1 is the path to the R1 PE trimmed file, -2 is the path to the R2 PE trimmed
#  file. PE files come in pairs, both the R1 and R2 are present. -u is the path
#  to the unpaired files. If you use fastp to trim reads, both R1 and R2 
# unpaired reads are saved into the same file.
# -o is where the output folder will be saved.
# -F is the type of organelle you are asking the program to find.
# Don't forget to replace USERNAME with your username, and PROJECT with your
# project name.
# --reduce-reads-for-coverage inf
# Taxa list to use for the 2nd element passed in calling the shell script
# embplant_pt
# other_pt
# embplant_mt
# embplant_nr
# animal_mt
# fungus_mt